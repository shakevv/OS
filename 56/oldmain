#include <stdint.h>
#include <err.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>


#define CHUNK_SIZE 16 //(1024 * 1024 * 256)
#define ELEMENTS_NUMBER (CHUNK_SIZE / sizeof(uint32_t))

//for qsort
int compare(const void* a, const void* b) {
	return (*(uint32_t*) a - *(uint32_t*) b);
}

int main(int argc, char* argv[]) {
	//check
	if(argc != 2) {
		errx(1, "err");
	}

	//test
int tfd = open(argv[1], O_RDWR | O_TRUNC);
uint32_t arr[5] = {4, 2, 10, 8, 6};
for(int i = 0; i < 5; ++ i) {
	write(tfd, arr + i, sizeof(uint32_t));
	printf("write to test [%d]\n", i); 
}
close(tfd);


//read and sort chunk1
	int fd = open(argv[1], O_RDWR);
	if(fd == -1) {
		err(2, "%s", argv[1]);
	}

	int tmp_fd[2];

	tmp_fd[0] = open("tmp_file1", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
	if(tmp_fd[0] == -1) {
		err(3, "err");
	}

	uint32_t* buff = malloc(CHUNK_SIZE);
	if(buff == NULL) {
		err(8, "err");
	}

	ssize_t rdnum;
	if((rdnum = read(fd, buff, CHUNK_SIZE)) < 0) {
		err(4, "err");
	}
	qsort(buff, rdnum / sizeof(uint32_t), sizeof(uint32_t), compare);
	
	if(rdnum == CHUNK_SIZE) {
		if(write(tmp_fd[0], buff, rdnum) < 0) {
		   	err(5, "err");
	   	}	

		//read and sort second chunk
		tmp_fd[1] = open("tmp_file2", O_RDWR | O_CREAT | O_TRUNC, 0644);
 		
		if((rdnum = read(fd, buff, CHUNK_SIZE)) < 0) {
 			err(4, "err");
 		}
 
 		qsort(buff, rdnum / sizeof(uint32_t), sizeof(uint32_t), compare);
        lseek(tmp_fd[1], - rdnum, SEEK_CUR);
	 	write(tmp_fd[1], buff, rdnum * sizeof(uint32_t));
			close(fd);
			close(tmp_fd[0]);
			close(tmp_fd[1]);
			free(buff);
		


	} else { //have enough ram and write to the file directly
	
		if(write(fd, buff, rdnum) < 0) {
			close(fd);
		   	close(tmp_fd[0]);
		   	free(buff);
		   	err(5, "err");
	   	}	

		close(fd);
		close(tmp_fd[0]);
		free(buff);

		exit(0);
	}

// merge chunks

	
	off_t offset1 = 0;
	off_t offset2 = 0;

	if(lseek(fd, 0, SEEK_SET) == -1) {
		close(fd);
		close(tmp_fd[0]);
		close(tmp_fd[1]);
		err(56, "err");
	}

	uint32_t b[2];

	while(offset1 != CHUNK_SIZE || offset2 != rdnum) {
		
		if(offset1 != CHUNK_SIZE) {
			if(read(tmp_fd[0], b, sizeof(uint32_t)) == -1) {
				close(fd);
				close(tmp_fd[0]);
				close(tmp_fd[1]);
				err(78, "err");
			}
		} else {
			b[0] = UINT32_MAX;
		}
	
		if(offset2 != rdnum) {
			if(read(tmp_fd[1], b + 1, sizeof(uint32_t)) == -1) {
				close(fd);
				close(tmp_fd[0]);
				close(tmp_fd[1]);
				err(79, "err");
			}
		} else {
			b[1] = UINT32_MAX;
		}

		if(compare((void *)b[0], (void *)b[1]) <= 0) {
			if(write(fd, b, sizeof(uint32_t)) == -1) {
				close(fd);
				close(tmp_fd[0]);
				close(tmp_fd[1]);
				err(80, "err");
			}
			offset1 ++;
		} else {
			if(write(fd, b + 1, sizeof(uint32_t)) == -1) {
				close(fd);
				close(tmp_fd[0]);
				close(tmp_fd[1]);
				err(81, "err");
			}
			offset2 ++;
		}
	}

	close(fd);
	close(tmp_fd[0]);
	close(tmp_fd[1]);

	exit(0);
}
